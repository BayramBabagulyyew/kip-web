generator client {
  provider = "prisma-client-js"
  output   = "../generated/client"
  binaryTargets   = ["native", "debian-openssl-3.0.x", "debian-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum partnerTypeEnum {
  dealership
  clients
  projects
}

model users {
  userId    String     @id @unique @default(cuid())
  username  String     @unique
  password  String
  about     about[]
  news      news[]
  projects  projects[]
  gallery   gallery[]
  partners  partners[]
  readMails mails[]
  createdAt DateTime   @default(dbgenerated("NOW()"))
  deletedAt DateTime?
}

model news {
  newsId       String    @id @unique @default(cuid())
  titleTm      String
  contentTm    String    @db.Text
  titleRu      String
  contentRu    String    @db.Text
  titleEn      String
  contentEn    String    @db.Text
  image        String
  video        String?
  published    Boolean
  isMain       Boolean   @default(false)
  homeActivity Boolean   @default(false)
  priority     Int?      @unique
  createdAt    DateTime  @default(dbgenerated("NOW()"))
  deletedAt    DateTime?
  authorId     String
  author       users     @relation(fields: [authorId], references: [userId])
}

model projects {
  projectId     String    @id @unique @default(cuid())
  nameTm        String
  nameRu        String
  nameEn        String
  descriptionTm String    @db.Text
  descriptionRu String    @db.Text
  descriptionEn String    @db.Text
  company       String
  logo          String
  workDate      DateTime  @db.Date()
  images        String[]
  cover         String
  priority      Int?      @unique
  homeActivity  Boolean   @default(false)
  createdAt     DateTime  @default(dbgenerated("NOW()"))
  deletedAt     DateTime?
  authorId      String
  author        users     @relation(fields: [authorId], references: [userId])
}

model partners {
  partnerId String          @id @unique @default(cuid())
  website   String?
  fileUrl   String
  priority  Int?
  type      partnerTypeEnum
  authorId  String
  author    users           @relation(fields: [authorId], references: [userId])
  createdAt DateTime        @default(dbgenerated("NOW()"))
  deletedAt DateTime?
}

model gallery {
  galleryId String    @id @unique @default(cuid())
  priority  Int?      @unique
  image     String
  authorId  String
  author    users     @relation(fields: [authorId], references: [userId])
  createdAt DateTime  @default(dbgenerated("NOW()"))
  deletedAt DateTime?
}

model mails {
  mailId    String    @id @unique @default(cuid())
  name      String
  email     String
  fileUrl   String?
  comment   String    @db.Text
  readBy    String?
  readUser  users?    @relation(fields: [readBy], references: [userId])
  createdAt DateTime  @default(dbgenerated("NOW()"))
  deletedAt DateTime?
}

model about {
  aboutId   String    @id @unique @default(cuid())
  titleTm   String
  contentTm String    @db.Text
  titleRu   String
  contentRu String    @db.Text
  titleEn   String
  contentEn String    @db.Text
  taglineTm String
  taglineRu String
  taglineEn String
  authorId  String
  author    users     @relation(fields: [authorId], references: [userId])
  createdAt DateTime  @default(dbgenerated("NOW()"))
  deletedAt DateTime?
}

model contact {
  contactId     String   @id @unique @default(cuid())
  phone         String
  mobilePhone   String
  instagram     String?
  instagramLink String?
  info          String
  addressTm     String
  addressRu     String
  addressEn     String
  createdAt     DateTime @default(dbgenerated("NOW()"))
  updatedAt     DateTime @updatedAt
}

model information {
  infoId    String   @id @unique @default(cuid())
  info1     Json?    @db.JsonB
  info2     Json?    @db.JsonB
  info3     Json?    @db.JsonB
  info4     Json?    @db.JsonB
  createdAt DateTime @default(dbgenerated("NOW()"))
  updatedAt DateTime @updatedAt
}

model ecology {
  ecologyId String   @id @unique @default(cuid())
  images    String[] @default([])
  titleTm   String
  titleRu   String
  titleEn   String
  contentTm String   @db.Text()
  contentRu String   @db.Text()
  contentEn String   @db.Text()
  video     String?
  createdAt DateTime @default(dbgenerated("NOW()"))
  updatedAt DateTime @updatedAt
}

model productServices {
  id        String                  @id @unique @default(cuid())
  nameTm    String
  nameEn    String
  nameRu    String
  logo      String
  contentTm String
  contentRu String
  contentEn String
  images    String[]
  type      productServicesTypeEnum
  priority  Int?
  createdAt DateTime                @default(dbgenerated("NOW()"))
  updatedAt DateTime                @updatedAt
  deletedAt DateTime?
}

model catalogs {
  catalogId   String          @id @unique @default(cuid())
  catalogType catalogTypeEnum @unique
  fileUrl     String
  createdAt   DateTime        @default(dbgenerated("NOW()"))
  updatedAt   DateTime        @updatedAt
}

enum productServicesTypeEnum {
  service
  product
  // type1 @map("service")
  // type2 @map("product")
}

enum catalogTypeEnum {
  home
  productservices
}
